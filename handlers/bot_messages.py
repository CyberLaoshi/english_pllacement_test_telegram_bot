from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import aiofiles

from utils.states import Form
from keyboards.builders import profile
from keyboards.reply import rmk
from data.speaking_questions import speaking_task
from keyboards.reply import phone
from datetime import datetime


router = Router()


@router.message(Command("start"))
async def command_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∫–æ–ª–∞ LinLab üëã</b>\n\n"
        "üìù –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç /quiz\n"
        "üó£ –ü—Ä–æ–π–¥–∏—Ç–µ —É—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç /speaking\n"
        "üìû –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /profile",
        reply_markup=rmk,
        parse_mode="HTML"
    )

@router.message(Command("exit"))
async def command_start(message: Message, state: FSMContext):
    data = await state.get_data()
    correct = data.get("–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–≤ —Ç–µ—Å—Ç–µ)", {})
    level = data.get("–£—Ä–æ–≤–µ–Ω—å", {})
    audio = data.get("–ê—É–¥–∏–æ", {})
    await state.clear()
    if correct or level or audio:
        await state.set_data({"–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–≤ —Ç–µ—Å—Ç–µ)": correct, "–£—Ä–æ–≤–µ–Ω—å": level, "–ê—É–¥–∏–æ": audio})
    await message.answer(
        "üìù –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç /quiz\n"
        "üó£ –ü—Ä–æ–π–¥–∏—Ç–µ —É—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç /speaking\n"
        "üìû –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É /profile",
        reply_markup=rmk,
        parse_mode="HTML"
    )

@router.message(Command("speaking"))
async def test(message: Message, state: FSMContext):
    await state.set_state(Form.speaking_link)
    await message.answer(speaking_task, reply_markup=rmk, parse_mode="HTML")

@router.message(Command("profile"))
async def fill_profile(message: Message, state: FSMContext):
    await state.set_state(Form.name)
    user_name = " ".join(message.from_user.username.split("_"))
    await message.answer(
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ üëâ /exit"
        "\n–ó–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. "
        "\n\n–í–≤–µ–¥–∏—Ç–µ <b>–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ: ",
        reply_markup=profile(str(user_name)), parse_mode="HTML"
    )


@router.message(Form.speaking_link)
async def form_name(message: Message, state: FSMContext):
    await state.update_data(–ê—É–¥–∏–æ=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ!"
                         "\n–ï—Å–ª–∏ –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç üëâ /exit, –ø–æ—Ç–æ–º üëâ /quiz"
                         "\n–î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É üëâ /profile", reply_markup=rmk)



@router.message(Form.name)
async def form_name(message: Message, state: FSMContext):
    await state.update_data(–∏–º—è=message.text)
    await state.set_state(Form.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=phone)


@router.message(Form.phone)
async def form_phone(message: Message, state: FSMContext):
    if message.contact:
        num = str(message.contact.phone_number).replace("+", "")
    else:
        num = message.text.replace(" ", "").replace("-", "")
    if num.isdigit() and (len(num) == 10 or len(num) == 11):
        await state.update_data(—Ç–µ–ª–µ—Ñ–æ–Ω=num)
        await state.set_state(Form.app_choice)
        await message.answer("–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=profile(["–ó–≤–æ–Ω–æ–∫", "WhatsApp", "Telegram"]))
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")


@router.message(Form.app_choice, F.text.casefold().in_(["–∑–≤–æ–Ω–æ–∫", "whatsapp", "telegram"]))
async def form_about(message: Message, state: FSMContext):
    await state.update_data(—Å–≤—è–∑—å=message.text)
    await state.set_state(Form.about)
    await message.answer(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –¥–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é",
        reply_markup=profile(["–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–†–∞–±–æ—Ç–∞", "–£—á–µ–±–∞"]))


@router.message(Form.app_choice)
async def incorrect_app_choice(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫!", reply_markup=profile(["WhatsApp", "Telegram"]))


@router.message(Form.about)
async def fill_about(message: Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á—É—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª—è—Ö –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!")
    else:
        await state.update_data(—Ü–µ–ª—å=message.text)
        data = await state.get_data()
        formatted_text = []
        [
            formatted_text.append(f"{key.capitalize()}: {value}")
            for key, value in data.items()
        ]
        profile_data = '\n'.join(formatted_text)
        await state.set_state(Form.verified)
        await message.answer(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–Ω–∏–∑—É –∏ <b>–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω–æ'</b>:"
            f"\n\n{profile_data}"
            f"\n\n–ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å–∏–º –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É üëâ /profile"
            f"\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–Ω–∫–µ—Ç—ã –±–µ–∑ –µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ üëâ /exit ",reply_markup=profile(["–í–µ—Ä–Ω–æ"]), parse_mode="HTML")


@router.message(Form.verified, F.text.casefold().in_(["–≤–µ—Ä–Ω–æ"]))
async def verified_reply(message: Message, state: FSMContext):
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –°–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    data = await state.get_data()
    path = "data/new_clients"
    submit_date = datetime.today().strftime('%d-%m-%Y')
    name = f"{message.from_user.id}_–æ—Ç_{submit_date}"
    async with aiofiles.open(f'{path}/–∑–∞—è–≤–∫–∞_{data["–∏–º—è"]}_{name}.txt', mode='w', encoding="utf-8") as f:
        data_saved = [f"{key}: {value}" for key, value in data.items()]
        await f.write('\n'.join(data_saved))